#!/usr/bin/env python3
"""
Script de configuraci√≥n autom√°tica para Railway
Configura el proyecto Django para producci√≥n en Railway
"""

import os
import sys
import subprocess
import django
from pathlib import Path

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'pagTickets.settings_railway')

def run_command(command, description):
    """Ejecutar comando con descripci√≥n"""
    print(f"üîß {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, 
                              capture_output=True, text=True)
        print(f"‚úÖ {description} - Completado")
        return result.stdout
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error en {description}: {e}")
        print(f"Output: {e.stdout}")
        print(f"Error: {e.stderr}")
        return None

def setup_railway_environment():
    """Configurar entorno para Railway"""
    print("üöÄ SISEG - Configuraci√≥n autom√°tica para Railway")
    print("=" * 50)
    
    # 1. Verificar dependencias
    print("üì¶ Verificando dependencias...")
    run_command("pip install -r requirements.txt", "Instalaci√≥n de dependencias")
    
    # 2. Configurar Django
    django.setup()
    
    # 3. Ejecutar migraciones
    run_command("python manage_railway.py migrate --noinput", "Migraciones de base de datos")
    
    # 4. Recopilar archivos est√°ticos
    run_command("python manage_railway.py collectstatic --noinput", "Recopilaci√≥n de archivos est√°ticos")
    
    # 5. Verificar configuraci√≥n
    print("üîç Verificando configuraci√≥n...")
    run_command("python manage_railway.py check --deploy", "Verificaci√≥n de despliegue")
    
    # 6. Crear superusuario si no existe (opcional)
    print("üë§ Configuraci√≥n de usuario admin...")
    
    print("\n‚úÖ Configuraci√≥n de Railway completada")
    print("üåê Tu aplicaci√≥n est√° lista para Railway")
    print("üìù Aseg√∫rate de configurar las variables de entorno en Railway:")
    print("   - DJANGO_SETTINGS_MODULE=pagTickets.settings_railway")
    print("   - DEBUG=False")
    print("   - RAILWAY_ENVIRONMENT=production")

def main():
    """Funci√≥n principal"""
    if len(sys.argv) > 1:
        if sys.argv[1] == '--setup':
            setup_railway_environment()
        elif sys.argv[1] == '--migrate-only':
            run_command("python manage_railway.py migrate --noinput", "Solo migraciones")
        elif sys.argv[1] == '--static-only':
            run_command("python manage_railway.py collectstatic --noinput", "Solo archivos est√°ticos")
        else:
            print("Opciones disponibles:")
            print("  --setup      : Configuraci√≥n completa")
            print("  --migrate-only : Solo migraciones")
            print("  --static-only  : Solo archivos est√°ticos")
    else:
        setup_railway_environment()

if __name__ == "__main__":
    main()
